//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/chinmaykelkar/Code/Harrisburg/Theory of Computation/FinalProject/FinalProject/calculator.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class calculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMBER=1, INT=2, FLOAT=3, WHITESPACE=4, NEWLINE=5, LPAREN=6, RPAREN=7, 
		DOT=8, SQUAREROOT=9, SQUARE=10, LOG=11, ADD=12, SUBTRACT=13, MULTIPLY=14, 
		DIVIDE=15, MOD=16, SIN=17, COS=18, TAN=19, COT=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "INT", "FLOAT", "WHITESPACE", "NEWLINE", "LPAREN", "RPAREN", 
		"DOT", "SQUAREROOT", "SQUARE", "LOG", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
		"MOD", "SIN", "COS", "TAN", "COT"
	};


	public calculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public calculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'('", "')'", "'.'", "'sqrt'", "'square'", 
		"'log'", "'+'", "'-'", "'*'", "'/'", "'%'", "'sin'", "'cos'", "'tan'", 
		"'cot'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "INT", "FLOAT", "WHITESPACE", "NEWLINE", "LPAREN", "RPAREN", 
		"DOT", "SQUAREROOT", "SQUARE", "LOG", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
		"MOD", "SIN", "COS", "TAN", "COT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static calculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x16', 'y', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '.', '\n', '\x2', '\x3', '\x3', '\x6', 
		'\x3', '\x31', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x32', '\x3', 
		'\x4', '\a', '\x4', '\x36', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x39', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', '>', 
		'\n', '\x4', '\r', '\x4', '\xE', '\x4', '?', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x2', '\x2', '\x16', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', 
		'\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', 
		'\x14', '\'', '\x15', ')', '\x16', '\x3', '\x2', '\x5', '\x3', '\x2', 
		'\x32', ';', '\x5', '\x2', '\v', '\v', '\xF', '\xF', '\"', '\"', '\x3', 
		'\x2', '\f', '\f', '\x2', '|', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x3', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x37', '\x3', '\x2', '\x2', '\x2', '\t', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x45', '\x3', '\x2', '\x2', '\x2', '\r', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\xF', 'K', '\x3', '\x2', '\x2', '\x2', '\x11', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x13', 'O', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x17', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '_', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '!', 'g', '\x3', '\x2', '\x2', '\x2', '#', 
		'i', '\x3', '\x2', '\x2', '\x2', '%', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\'', 'q', '\x3', '\x2', '\x2', '\x2', ')', 'u', '\x3', '\x2', '\x2', 
		'\x2', '+', '.', '\x5', '\x5', '\x3', '\x2', ',', '.', '\x5', '\a', '\x4', 
		'\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x4', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\t', '\x2', 
		'\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x36', '\t', '\x2', '\x2', '\x2', '\x35', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x5', '\x11', '\t', '\x2', ';', 
		'=', '\x3', '\x2', '\x2', '\x2', '<', '>', '\t', '\x2', '\x2', '\x2', 
		'=', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\b', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\t', '\x3', '\x2', 
		'\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\b', 
		'\x5', '\x2', '\x2', '\x44', '\n', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x46', '\t', '\x4', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\b', '\x6', '\x2', '\x2', 'H', '\f', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '*', '\x2', '\x2', 'J', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\a', '+', '\x2', '\x2', 'L', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', '\x30', '\x2', '\x2', 'N', '\x12', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\a', 'u', '\x2', '\x2', 'P', 'Q', '\a', 's', '\x2', 
		'\x2', 'Q', 'R', '\a', 't', '\x2', '\x2', 'R', 'S', '\a', 'v', '\x2', 
		'\x2', 'S', '\x14', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 'u', '\x2', 
		'\x2', 'U', 'V', '\a', 's', '\x2', '\x2', 'V', 'W', '\a', 'w', '\x2', 
		'\x2', 'W', 'X', '\a', '\x63', '\x2', '\x2', 'X', 'Y', '\a', 't', '\x2', 
		'\x2', 'Y', 'Z', '\a', 'g', '\x2', '\x2', 'Z', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', 'n', '\x2', '\x2', '\\', ']', '\a', 'q', '\x2', 
		'\x2', ']', '^', '\a', 'i', '\x2', '\x2', '^', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '_', '`', '\a', '-', '\x2', '\x2', '`', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\a', '/', '\x2', '\x2', '\x62', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\a', ',', '\x2', '\x2', '\x64', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x31', '\x2', 
		'\x2', '\x66', ' ', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '\'', 
		'\x2', '\x2', 'h', '\"', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', 'u', 
		'\x2', '\x2', 'j', 'k', '\a', 'k', '\x2', '\x2', 'k', 'l', '\a', 'p', 
		'\x2', '\x2', 'l', '$', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\x65', 
		'\x2', '\x2', 'n', 'o', '\a', 'q', '\x2', '\x2', 'o', 'p', '\a', 'u', 
		'\x2', '\x2', 'p', '&', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', 'v', 
		'\x2', '\x2', 'r', 's', '\a', '\x63', '\x2', '\x2', 's', 't', '\a', 'p', 
		'\x2', '\x2', 't', '(', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x65', 
		'\x2', '\x2', 'v', 'w', '\a', 'q', '\x2', '\x2', 'w', 'x', '\a', 'v', 
		'\x2', '\x2', 'x', '*', '\x3', '\x2', '\x2', '\x2', '\a', '\x2', '-', 
		'\x32', '\x37', '?', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
