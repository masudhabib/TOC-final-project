//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/chinmaykelkar/Code/Harrisburg/Theory of Computation/FinalProject/FinalProject/conditionalstatements.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="conditionalstatementsParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public interface IconditionalstatementsVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="conditionalstatementsParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStart([NotNull] conditionalstatementsParser.StartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="conditionalstatementsParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] conditionalstatementsParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="conditionalstatementsParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] conditionalstatementsParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="conditionalstatementsParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] conditionalstatementsParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="conditionalstatementsParser.conditinalstatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditinalstatement([NotNull] conditionalstatementsParser.ConditinalstatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="conditionalstatementsParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrint([NotNull] conditionalstatementsParser.PrintContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="conditionalstatementsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] conditionalstatementsParser.ExpressionContext context);
}
